#ifndef LAB4B_FUNCTIONS_H
#define LAB4B_FUNCTIONS_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#include <time.h>

#define Line printf("------------------------------------------------------------------------------------------------------------\n");
#define Numbers 2 // количество пространств ключей

typedef struct Item {   // структура элемента
    int key[Numbers];   // массив ключей определяющих элемент
    char *info;// информация элемента
    struct Item *next;
}Item;

typedef struct Node {   // структура узла дерева
    Item *item;       // элемент
    struct Node *left;   // левое  поддерево
    struct Node *right;  // правое поддерево
}Node;

typedef struct Tree {
    FILE *fd_keys;
    FILE *fd_data;
    Node *root;
} Tree;


/**************************************************************************************************************************************************************/
/*Прототипы функций*/
int getInt(int *);
char *get_str();
void clean_stdin();
int dialog(const char *msgs[], int);

// Массив диагностических сообщений об ошибках
const char *errmsgs[] = {"Ok", "Найден дубликат ключа", "Дерево пусто", "Ключ не найден"};


// Альтерантивы меню для организации диалога
const char *msgs[] = {"0. Выйти", "1. Добавить новый элемент", "2. Найти информацию по ключу",
                      "3. Найти максимальный ключ", "4. Удалить элемент",
                      "5. Вывести таблицу в порядке следования ключей",
                      "6. Таймирование дерева"};


// Кол-во альтернатив (Для вывода в for)
const int NMsgs = sizeof(msgs) / sizeof(msgs[0]);

/* Диалоговые функции */
int D_Add(Tree *);                    // Диалоговая функция включения в дерево нового элемента
int D_Find(Tree *);                   // Диалоговая функция поиска узла дерева по условию лабы
int D_Find_Min_Key(Tree *);           // Диалоговая функция поиска минимального элемента в дереве
int D_Delete(Tree *);                 // Диалоговая функция удаления узла дерева по ключу
int D_Show(Tree *);                   // Диалоговая функция вывода всего дерева в нужном порядке следования ключей
int D_Timing(Tree *);                 // Диалоговая функция таймирования дерева

// Массив указателей на функции - для реализации выбора функции; порядок перечисления функций в списке инициализации должен соответсвовать порядку указания альтернатив в списке альернатив
int (*fptr[])(Tree *) = {NULL, D_Add, D_Find, D_Find_Min_Key, D_Delete, D_Show, D_Timing };



#endif //LAB4B_FUNCTIONS_H
